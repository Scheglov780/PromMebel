<?php

namespace app\models\ar;

use Yii;
use yii\db\ActiveQuery;

/**
 * This is the model class for table "property".
 *
 * @property int $id
 * @property string $name
 * @property string $value_name
 * @property string $type
 * @property int $order
 *
 * @property PropertyToProduct[] $propertyToProducts
 */
class Property extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'property';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'value_name'], 'string', 'max' => 255],
            [['type'], 'string', 'max' => 50],
            [['order'], 'integer'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название свойства',
            'value_name' => 'Единицы измерения',
            'type' => 'Группа',
            'order' => 'Порядок',
        ];
    }

    public function beforeSave($insert)
    {
        if(empty($this->type)) $this->type = null;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * Gets query for [[PropertyToProducts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPropertyToProducts()
    {
        return $this->hasMany(PropertyToProduct::className(), ['property_id' => 'id']);
    }

    public static function getTypes()
    {
        $array = self::find()->select('type DESC')->groupBy('type')->column();
        $null = array_shift($array);
        foreach ($array as $k => $a) {
            if($a == 'Основа') {
                unset($array[$k]);
            }
        }
        $data[0] = 'Основа';

        $data = array_merge($data, $array);
        $data[] = $null;
        return $data;
    }
    /**
     * {@inheritdoc}
     * @return \app\models\query\ProductQuery the active query used by this AR class.
     */
    public static function findAdmin()
    {
        return new \app\models\query\PropertyQuery(get_called_class());
    }
}
