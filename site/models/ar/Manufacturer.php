<?php

namespace app\models\ar;

use Yii;
use yii\base\Exception;
use yii\behaviors\SluggableBehavior;
use yii\web\UploadedFile;

/**
 * This is the model class for table "manufacturer".
 *
 * @property int $id
 * @property string $name
 * @property string $slug
 * @property string $description
 * @property string $video
 * @property string|null $img
 * @property int|null $order
 * @property int $type
 * @property int $status
 * @property string|null $meta_title
 * @property string|null $meta_description
 * @property string|null $meta_keywords
 *
 * @property FileToManufacturer[] $files
 */
class Manufacturer extends BaseAR
{
    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;
    const TYPE_DEFAULT = 0;
    /**
     * @var UploadedFile[]
     */
    public $docFiles;
    public $oldImgs;

    public function afterDelete()
    {
        if (isset($this->img)) {
            unlink(Yii::getAlias('@manufacturerroot/' . $this->img));
        }

        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
          'description'   => 'Описание',
          'id'            => 'ID',
          'img'           => 'Изображение',
          'meta_keywords' => 'SEO Meta Keywords',
          'name'          => 'Название',
          'order'         => 'Порядок',
          'status'        => 'Вкл',
          'type'          => 'Тип',
          'video'         => 'Шорткод видео с Youtube',
        ];
    }

    public function beforeSave($insert)
    {
        if (!$this->isAttributeChanged('img')) {
            return parent::beforeSave($insert);
        }

        $tmpImgs = explode(',', $this->img);

        //  Повторно проверяем входные данные
        if (!is_array($tmpImgs)) {
            return $this->addError('img', 'Проблемы с сохранением изображения');
        }

        //  Валидные ли данные и есть ли данные изображения
        foreach ($tmpImgs as $tmpImg) {
            if (!file_exists(Yii::getAlias('@webroot' . $tmpImg))) {
                return $this->addError('img', 'Проблемы с сохранением изображения');
            }
        }

        //  Записываем новые файлы
        foreach ($tmpImgs as $tmpImg) {
            $imgPath = Yii::getAlias('@webroot' . $tmpImg);
            $pathInfo = pathinfo($imgPath);
            $newName = md5($imgPath . time()) . '.' . $pathInfo['extension'];
            copy($imgPath, Yii::getAlias('@manufacturerroot/' . $newName));
            $this->img = $newName;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
          [
            'class'         => SluggableBehavior::class,
            'attribute'     => 'name',
            'slugAttribute' => 'slug',
            'ensureUnique'  => true,
          ],
        ];
    }

    public function getFiles()
    {
        return $this->hasMany(FileToManufacturer::class, ['manufacturer_id' => 'id'])->andWhere(
          ['type' => FileToManufacturer::TYPE_MANUFACTURER]
        );
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
          [['name', 'img'], 'required'],
          [['video', 'description'], 'safe'],
          [['slug', 'meta_title', 'meta_description', 'meta_keywords'], 'string'],
          [['slug'], 'unique'],
          [['order', 'type', 'status'], 'integer'],
          [['name', 'img'], 'string', 'max' => 255],
          ['type', 'default', 'value' => self::TYPE_DEFAULT],
          ['status', 'default', 'value' => self::STATUS_ACTIVE],
          ['order', 'default', 'value' => 0],
          [['docFiles'], 'file', 'maxFiles' => 5],
        ];
    }

    public function upload()
    {
        if ($this->validate()) {
            foreach ($this->docFiles as $file) {
                $newName = $file->baseName . '.' . $file->extension;
                $res = $file->saveAs(Yii::getAlias('@manufacturerroot/' . $newName));
                if ($res) {
                    $file = new FileToManufacturer();
                    $file->manufacturer_id = $this->id;
                    $file->name = $newName;
                    $file->type = FileToManufacturer::TYPE_MANUFACTURER;
                    $file->save();
                }
            }
            return true;
        } else {
            return false;
        }
    }

    /**
     * {@inheritdoc}
     * @return \app\models\query\ManufacturerQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\ManufacturerQuery(get_called_class());
    }

    public static function getAll()
    {
        return self::find()->all();
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'manufacturer';
    }
}
