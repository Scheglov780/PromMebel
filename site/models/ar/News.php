<?php

namespace app\models\ar;

use Yii;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "news".
 *
 * @property int $id
 * @property string $name
 * @property string $slug
 * @property string $img
 * @property string|null $description
 * @property string|null $short_description
 * @property string $created_at
 * @property int|null $publish
 * @property string|null $meta_title
 * @property string|null $meta_description
 * @property string|null $meta_keywords
 */
class News extends BaseAR
{
    const STATUS_DISABLED = 0;
    const STATUS_PUBLISH = 1;
    public static $statusNames = [
      self::STATUS_PUBLISH  => 'Опубликован',
      self::STATUS_DISABLED => 'Скрыт',
    ];

    public function afterDelete()
    {
        if (isset($this->img)) {
            if (file_exists(Yii::getAlias('@newsroot/' . $this->img))) {
                unlink(Yii::getAlias('@newsroot/' . $this->img));
            }
        }

        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
          'created_at'        => 'Дата публикации',
          'description'       => 'Текст новости',
          'id'                => 'ID',
          'img'               => 'Изображение предпросмотра',
          'name'              => 'Заголовок',
          'publish'           => 'Статус новости',
          'short_description' => 'Краткое описание',
        ];
    }

    public function beforeSave($insert)
    {
        if (!$this->isAttributeChanged('img')) {
            return parent::beforeSave($insert);
        }

        $tmpImgs = explode(',', $this->img);

        //  Повторно проверяем входные данные
        if (!is_array($tmpImgs)) {
            return $this->addError('img', 'Проблемы с сохранением изображения');
        }

        //  Валидные ли данные и есть ли данные изображения
        foreach ($tmpImgs as $tmpImg) {
            if (!file_exists(Yii::getAlias('@webroot' . $tmpImg))) {
                return $this->addError('img', 'Проблемы с сохранением изображения');
            }
        }

        //  Сносим старые файлы что бы записать новые
        /*        $oldImg = $this->getOldAttribute('img');
                if(isset($oldImg)) {
                    if(file_exists(Yii::getAlias('@newsroot/'.$oldImg))) {
                        unlink(Yii::getAlias('@newsroot/'.$oldImg));
                    }
                }*/

        //  Записываем новые файлы
        foreach ($tmpImgs as $tmpImg) {
            $imgPath = Yii::getAlias('@webroot' . $tmpImg);
            $pathInfo = pathinfo($imgPath);
            if (strpos($imgPath, 'news')) {
                $this->img = $pathInfo['basename'];
            } else {
                $newName = md5($imgPath . time()) . '.' . $pathInfo['extension'];
                copy($imgPath, Yii::getAlias('@newsroot/' . $newName));
                $this->img = $newName;
            }
        }

        return parent::beforeSave($insert);
    }

    public function behaviors()
    {
        return [
          [
            'class'         => SluggableBehavior::class,
            'attribute'     => 'name',
            'slugAttribute' => 'slug',
            'ensureUnique'  => true,
          ],
        ];
    }

    public function getFullImg()
    {
        return Yii::getAlias('@news/' . $this->img);
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
          [['description', 'short_description', 'meta_title', 'meta_description', 'meta_keywords'], 'string'],
          [['created_at', 'img'], 'safe'],
          [
            'created_at',
            'default',
            'value' => function () {
                return date('Y-m-d H:i:s', time());
            }
          ],
          [['publish'], 'integer'],
          [['name'], 'required'],
          [['name', 'slug'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'news';
    }
}
