<?php

namespace app\models\ar;

use Yii;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveQuery;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\helpers\VarDumper;

/**
 * This is the model class for table "category".
 * @property int         $id
 * @property string|null $name
 * @property string|null $slug
 * @property int         $parent_id
 * @property string|null $description
 * @property string|null $description_short
 * @property int|null    $order
 * @property int         $type
 * @property int         $status
 * @property string|null $img
 * @property string|null $alt
 * @property float|null  $price_from
 * @property string|null $meta_title
 * @property string|null $meta_description
 * @property string|null $meta_keywords
 * @property int         $parent_exists
 * @property int         $children_count
 * @property Product[]   $products
 * @property Category    $parent
 * @property Category[]  $childs
 */
class Category extends BaseAR
{
    const STATUS_DISABLED = 0;
    const STATUS_PUBLISH = 1;
    public $children_count;
    public $parent_exists;
    public static $statusNames = [
      self::STATUS_PUBLISH  => 'Опубликован',
      self::STATUS_DISABLED => 'Скрыт',
    ];

    public function afterDelete()
    {
        if (isset($this->img)) {
            if (file_exists(Yii::getAlias('@catroot/' . $this->img))) {
                unlink(Yii::getAlias('@catroot/' . $this->img));
            }
        }

        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
          'alt'              => 'SEO Alt',
          'description'      => 'Описание',
          'id'               => 'ID',
          'img'              => 'Изображение',
          'meta_description' => 'SEO Meta Description',
          'meta_keywords'    => 'SEO Meta Keywords',
          'meta_title'       => 'SEO Meta Title',
          'name'             => 'Название',
          'order'            => 'Порядок',
          'parent_id'        => 'Родительская категория',
          'status'           => 'Вкл',
          'type'             => 'Тип',
          'price_from'       => 'Цена от',
           'children_count' => 'Кол-во дочерних категорий',
          'parent_exists' => 'Есть родителськая категория',
        ];
    }

    public function beforeSave($insert)
    {
        if (!$this->isAttributeChanged('img')) {
            return parent::beforeSave($insert);
        }

        $tmpImgs = explode(',', $this->img);

        //  Повторно проверяем входные данные
        if (!is_array($tmpImgs)) {
            return $this->addError('img', 'Проблемы с сохранением изображения');
        }

        //  Валидные ли данные и есть ли данные изображения
        foreach ($tmpImgs as $tmpImg) {
            if (!file_exists(Yii::getAlias('@webroot' . $tmpImg))) {
                return $this->addError('img', 'Проблемы с сохранением изображения');
            }
        }

        //  Записываем новые файлы
        foreach ($tmpImgs as $tmpImg) {
            $imgPath = Yii::getAlias('@webroot' . $tmpImg);
            $pathInfo = pathinfo($imgPath);
            if (strpos($imgPath, 'category')) {
                $this->img = $pathInfo['basename'];
            } else {
                $newName = md5($imgPath . time()) . '.' . $pathInfo['extension'];
                copy($imgPath, Yii::getAlias('@catroot/' . $newName));
                $this->img = $newName;
            }
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function beforeValidate()
    {
        $this->price_from = str_replace(',', '.', $this->price_from);

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
          [
            'class'         => SluggableBehavior::class,
            'attribute'     => 'name',
            'slugAttribute' => 'slug',
            'ensureUnique'  => true,
          ],
        ];
    }

    /**
     * @return Category|array|null|\yii\db\ActiveQuery|\yii\db\ActiveRecord
     */
    public function getChilds()
    {
        return $this->hasMany(self::class, ['parent_id' => 'id'])->orderBy('order, name');
    }

    public function getImgUrl()
    {
        return '/static/category/' . $this->img;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(self::class, ['id' => 'parent_id']);
    }

    /**
     * Gets query for [[Products]].
     * @return \yii\db\ActiveQuery
     */
    public function getProducts()
    {
        return $this->hasMany(Product::class, ['category_id' => 'id'])->orderBy('order ASC, name');
        //return Product::find()->where(['category_id' => explode(',',$this->id)])->orderBy('order ASC');
    }

    public function getWithoutSelfCategories($regular = true, $autonomous = true, $roots = true)
    {
        if ($regular) {
            /** @var $allCats Category[] */
            $allCats = self::find()->andWhere(['not in', 'id', [$this->id]])
              ->orderBy('parent_id, order, name')
              ->with('products')
              ->all();
        } else {
            $allCats = [];
        }
        $cats = [];
        if ($autonomous) {
            $autonomousCatParent = new \stdClass();
            $autonomousCatParent->id = -1;
            $autonomousCatParent->name = 'Автономная категория';
            $cats[] = $autonomousCatParent;
        }
        if ($roots) {
            $parentCatParent = new \stdClass();
            $parentCatParent->id = 0;
            $parentCatParent->name = 'Корневая категория';
            $cats[] = $parentCatParent;
        }
        foreach ($allCats as $c) {
            if (count($c->products) == 0 || $c->parent_id == 0) { // || $c->id < 4
                $cats[] = $c;
            }
        }
        //VarDumper::dump($cats,3,true); die;
        return $cats;
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
          [['parent_id', 'order', 'type', 'status'], 'integer'],
          [['description', 'slug', 'meta_title', 'meta_description', 'meta_keywords'], 'string'],
          [['name', 'img'], 'required'],
          [['name', 'img', 'alt'], 'string', 'max' => 255],
          [['description_short'], 'string', 'max' => 120],
          [['price_from'], 'number'],
          [['parent_exists','children_count'], 'safe'],
        ];
    }

    public function selectInput($class = '')
    {
        $array = [];
        foreach ($this->childs as $child) {
            if (count($child->childs) == 0) {
                $array['slug+' . $child->slug] = $child->name;
            } else {
                $array['anchor+' . $child->id] = $child->name;
            }
        }
        return Html::dropDownList('cat', null, $array, ['class' => 'category-select ' . $class]);
    }

    public static function getBreadcrumbs(self $category)
    {
        if (isset($category->parent)) {
            return array_merge([
              [
                'label' => $category->name,
                'url'   => Url::toRoute(['/front/category/view', 'slug' => $category->slug]),
              ],
            ], self::getBreadcrumbs($category->parent));
        }

        return [
          [
            'label' => $category->name,
            'url'   => Url::toRoute(['/front/category/view', 'slug' => $category->slug]),
          ],
        ];
    }

    public static function getCategoriesTree($id = 0, $mobile = false)
    {
        $categories = self::find()->indexBy('id')->orderBy('order, name')->asArray()->all();

        return self::getChildCategoriesTree($categories, $id, $id, $mobile);
    }

    public static function getCategoriesWithoutChild($regular = true, $autonomous = false)
    {
        /** @var $allCats Category[] */

        if ($regular && $autonomous) {
            $params = '1=1';
        } elseif (!$regular && $autonomous) {
            $params = 'parent_id < 0';
        } elseif ($regular && !$autonomous) {
            $params = 'parent_id >= 0';
        } else {
            $params = '1=0';
        }
        $allCats = self::find()
          ->where($params)
          ->orderBy('parent_id, order, name')
          ->with('childs')
          ->all();
        $cats = [];
        foreach ($allCats as $c) {
            if (count($c->childs) == 0 || $autonomous) {
                $cats[] = $c;
            }
        }
        return $cats;
    }

    /**
     * @param     $categories array
     * @param int $id
     * @return array
     */
    public static function getChildCategoriesTree(&$categories, $id = 0, $startId = 0, $mobile = false)
    {
        $array = [];
        foreach ($categories as $cat) {
            if ($cat['parent_id'] == $id) {
                $items = self::getChildCategoriesTree($categories, $cat['id'], $startId);
                $class = '';
                $img = '';
                if (count($items)) {
                    $class = 'parent-item';
                    if ($mobile) {
                        $img = '<img src="/img/arrow_right_2.svg">';
                    }
                }
                $array[] = [
                  'options' => [
                    'class' => $class,
                  ],
                  'encode'  => false,
                  'label'   => $cat['name'] . $img,
                    //'active' => Url::current() == Url::to(['/category/view', 'id' => $cat->id]) ? true : false,
                    //'url' => Url::to(['/category/view', 'id' => $cat->id]),
                  'url'     => Url::toRoute(['/front/category/view', 'slug' => $cat['slug']]),
                  'items'   => self::getChildCategoriesTree($categories, $cat['id'], $startId, $mobile),
                ];
            }
        }
        if (!$mobile && count($array) && $startId != $id) {
            $tree = array_merge([
              [
                'label' => $categories[$id]['name'],
              ],
            ], $array);
        } else {
            $tree = $array;
        }

        return $tree;
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'category';
    }

    /*    public static function find()
        {
            return (new ActiveQuery(self::class))->andWhere(['<>', 'id', 1]);
        }*/
}
