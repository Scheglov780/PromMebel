<?php

namespace app\models\ar;

use Yii;
use yii\helpers\Json;

/**
 * This is the model class for table "order".
 *
 * @property int $id
 * @property int $status
 * @property string|null $company_name
 * @property string|null $name
 * @property string|null $email
 * @property string|null $phone
 * @property string|null $region
 * @property string|null $delivery_type
 * @property string|null $delivery_type_text
 * @property string|null $address
 * @property string|null $comment
 * @property string|null $data
 * @property string|null $dataText;
 * @property string|null $file_name
 * @property array|string|null $products
 * @property float|null $sum
 * @property float|null $mass
 * @property float|null $value
 */
class Order extends \yii\db\ActiveRecord
{

    const STATUS_NEW = 0;
    const STATUS_VIEW = 1;
    public $verifyCode;
//    public $dataText;
    public static $datas = [
      'montaj'    => 'Сборка и монтаж',
      'catalog'   => 'Выслать каталог продукции',
      'pricelist' => 'Выслать прайс лист',
      'view'      => 'Выслать вид рабочего места',
      '3d'        => 'Подготовить 3D проект оснащения мебелью',
      'autsor'    => 'Выезд Нашего специалиста',
      'esd'       => 'Подготовить ТЗ для торгов',
    ];
    public static $delivery = [
      1 => 'Доставка до терминала ТК (отправим в Ваш адрес)',
      2 => 'Доставка до Вашего склада',
      3 => 'Самовывоз со склада производства',
    ];
    public static $status = [
      self::STATUS_NEW  => 'новый',
      self::STATUS_VIEW => 'просмотренный',
    ];

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
          'address'       => 'Адрес доставки',
          'comment'       => 'Примечание',
          'company_name'  => 'Наименование компании',
          'data'          => 'Пожелания к заказу',
          'delivery_type' => 'Способ доставки',
          'email'         => 'e-mail',
          'id'            => 'ID',
          'name'          => 'Контактное лицо',
          'phone'         => 'Телефон',
          'products'      => 'Товары',
          'region'        => 'Регион',
          'sum'           => 'Общая цена',
          'verifyCode'    => Yii::t('app', 'Код проверки'),
        ];
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $productIds = array_keys($this->products);
            /** @var $products Product[] */
            $products = Product::find()->andWhere(['id' => $productIds])->indexBy('id')->all();

            $sum = 0;
            foreach ($this->products as $pId => $count) {
                if (isset($products[$pId])) {
                    $sum += $count * $products[$pId]->getActualPrice(true);
                }
            }

            $this->sum = $sum;
            $this->products = Json::encode($this->products);
            $this->data = Json::encode($this->data);
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getDataText()
    {
        $dataArr = json_decode($this->data, true);
        if (empty($dataArr) || !is_array($dataArr)) {
            $dataArr = [];
        }
        $dataArrResIntersect = array_intersect_key(self::$datas, $dataArr);
        return implode(', ', $dataArrResIntersect);
    }

    public function getDelivery_type_text()
    {
        if (!empty($this->delivery_type)) {
            return @self::$delivery[$this->delivery_type];
        } else {
            return 'не указано';
        }
    }

    public function getMass()
    {
        if (empty($this->products)) {
            return 0;
        }
        if (is_array($this->products)) {
            $productsOrder = $this->products;
            $productsIds = @array_keys($productsOrder);
        } else {
            $productsOrder = json_decode($this->products, true);
            if (!$productsOrder) {
                $productsOrder = [];
            }
            $productsIds = @array_keys($productsOrder);
        }
        /** @var $products Product[] */
        $products = Product::find()->andWhere(['id' => $productIds])->indexBy('id')->all();
        $mass = 0;
        foreach ($productsOrder as $id => $count) {
            $mass = $mass + $products[$id]->getMass($count);
        }
        return $mass;
    }

    public function getValue()
    {
        if (empty($this->products)) {
            return 0;
        }
        if (is_array($this->products)) {
            $productsOrder = $this->products;
            $productsIds = @array_keys($productsOrder);
        } else {
            $productsOrder = json_decode($this->products, true);
            if (!$productsOrder) {
                $productsOrder = [];
            }
            $productsIds = @array_keys($productsOrder);
        }
        /** @var $products Product[] */
        $products = Product::find()->andWhere(['id' => $productIds])->indexBy('id')->all();
        $value = 0;
        foreach ($productsOrder as $id => $count) {
            $value = $value + $products[$id]->getValue($count);
        }
        return $value;
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        $result = [
          [['name', 'email', 'phone', 'products'], 'required', 'message' => 'Заполните поле'],
          [['verifyCode'], 'required', 'on' => 'fromcart'],

          [['comment'], 'string'],
          [['products', 'sum', 'data'], 'safe'],
          [['status'], 'integer'],
          [['status'], 'default', 'value' => self::STATUS_NEW],
          [
            ['company_name', 'name', 'email', 'phone', 'region', 'delivery_type', 'address', 'file_name'],
            'string',
            'max' => 255
          ],
        ];
        $result[] = array(
          'email',
          'email',
          'allowName' => false,
          'pattern'   => '/[a-z0-9\-\.\+%_]+@[a-z0-9\.\-]+\.[a-z]{2,6}/i'
        );
        $result[] = array(
          'phone',
          'match',
          'pattern' => '/[\+\-\(\)\s0-9]/i',
        );
        $result[] = [
          'verifyCode',
          'captcha',
            //'allowEmpty'    => !Captcha::checkRequirements(),
          'caseSensitive' => false,
          'captchaAction' => '/front/product/captcha',
          'on'            => 'fromcart'
        ];
        return $result;
    }

    public static function getUnreadCount()
    {
        return self::find()->andWhere(['status' => self::STATUS_NEW])->count();
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'order';
    }
}
